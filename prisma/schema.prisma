generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  fullName          String
  firstName         String
  lastName          String
  description       String
  phone             String?
  docIdentification String
  DateOfBirth       String
  status            Boolean        @default(true)
  typeUserId        Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  typeUser          TypeUser       @relation(fields: [typeUserId], references: [id])
  profileImage      ProfileImage[]
  userCompany       UserCompany[]
  address           Address[]
  refreshToken      RefreshToken[]
  Collect           Collect[]
  CollectBy         CollectBy[]
}

model Company {
  id                Int             @id @default(autoincrement())
  docIdentification String
  fantasyName       String
  corporateReason   String?
  phone             String?
  email             String
  status            Boolean         @default(true)
  type              Int             @default(1)
  description       String?
  occupationAreaId  Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  profileImage      ProfileImage[]
  userCompany       UserCompany[]
  address           Address[]
  occupationArea    OccupationArea? @relation(fields: [occupationAreaId], references: [id], onDelete: Cascade)
  Subscription      Subscription[]
  CollectBy         CollectBy[]
}

model UserCompany {
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  status    Boolean  @default(true)
  admin     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
}

model TypeUser {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
}

model OccupationArea {
  id      Int       @id @default(autoincrement())
  name    String
  Company Company[]
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  url       String
  size      Int
  type      String
  userId    Int
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Address {
  id             Int              @id @default(autoincrement())
  cep            String
  street         String
  number         String
  complement     String?
  district       String
  city           String
  state          String
  country        String
  userId         Int?
  companyId      Int?
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  company        Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  AddressCollect AddressCollect[]
  Collect        Collect[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model Plans {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  durationDays Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model StatusSubscription {
  id           Int            @id @default(autoincrement())
  name         String
  color        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  startDate            DateTime
  endDate              DateTime
  statusSubscriptionId Int
  companyId            Int
  planId               Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  statusSubscription   StatusSubscription @relation(fields: [statusSubscriptionId], references: [id], onDelete: Cascade)
  companies            Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plans                Plans              @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model StatusCollect {
  id        Int       @id @default(autoincrement())
  name      String
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Collect   Collect[]
}

model Collect {
  id              Int       @id @default(autoincrement())
  description     String
  code            String
  collectedAt     DateTime?
  receivedAt      DateTime?
  userId          Int
  addressId       Int
  statusCollectId Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusCollect StatusCollect @relation(fields: [statusCollectId], references: [id], onDelete: Cascade)
  addresses     Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)

  CollectBy      CollectBy[]
  AddressCollect AddressCollect[]
  ImagesCollect  ImagesCollect[]
}

model CollectBy {
  id          Int      @id @default(autoincrement())
  collectId   Int
  collectorId Int?
  companyId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collector User?    @relation(fields: [collectorId], references: [id], onDelete: Cascade)
  companies Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  collects  Collect  @relation(fields: [collectId], references: [id], onDelete: Cascade)
}

model AddressCollect {
  id        Int      @id @default(autoincrement())
  type      Int // '1' para "Coletado" em E '2' para "Entregue em"
  collectId Int
  addressId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  collects  Collect @relation(fields: [collectId], references: [id], onDelete: Cascade)
}

model ImagesCollect {
  id   Int    @id @default(autoincrement())
  url  String
  size Int
  type String

  collectId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collects Collect @relation(fields: [collectId], references: [id], onDelete: Cascade)
}
